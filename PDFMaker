// CAN DO NEXT:
  // GET THE DATE OF MONDAY IN A PLACE WHERE IT MAKES SENSE
  // MOMENT.JS?
  // IMPLEMENT BUILDING A FOLDER STRUCTURE IN A PLACE THAT MAKES SENSE

function onOpen(){
 var ui = SpreadsheetApp.getUi();
 ui.createMenu('PDF Maker')
  .addItem('Generate PDFs for Week','publishWeek')
  .addItem('Single Day', 'publishDay')
 .addSeparator()
      .addSubMenu(SpreadsheetApp.getUi().createMenu('Single Day')
          .addItem('Monday', 'Monday')
          .addItem('Tuesday', 'Tuesday')
          .addItem('Wednesday', 'Wednesday')
          .addItem('Thursday', 'Thursday')
          .addItem('Friday', 'Friday'))
 .addToUi();
}

function Monday(){
  publishDay("Monday");
}
function Tuesday(){
  publishDay("Tuesday");
}
function Wednesday(){
  publishDay("Wednesday");
}
function Thursday(){
  publishDay("Thursday");
}
function Friday(){
  publishDay("Friday");
}
  

function publishDay(day) {  
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  SpreadsheetApp.setActiveSheet(spreadsheet.getSheetByName("School_Delivery"));
  var sheetWithDate = SpreadsheetApp.getActiveSheet();
  sheetWithDate.getRange('E2').setValue(day);
  var targetDate = sheetWithDate.getRange("E3").getValue();
  targetDate = Utilities.formatDate(targetDate, "GMT", "yyyy-MM-dd-EEEE");
  generatePdf(targetDate);  
}

function publishWeek() {
  
  options = {muteHttpExceptions: false};
  
  days = ["Monday","Tuesday","Wednesday","Thursday","Friday"]

  for (var i = 0; i < days.length; i++) {
  
    var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    SpreadsheetApp.setActiveSheet(spreadsheet.getSheetByName("School_Delivery"));
    
    var sheetWithDate = SpreadsheetApp.getActiveSheet();
    sheetWithDate.getRange('E2').setValue(days[i]);
    var targetDate = sheetWithDate.getRange("E3").getValue();
    targetDate = Utilities.formatDate(targetDate, "GMT", "yyyy-MM-dd-EEEE");
    if (days[i] == "Monday") {
      //get the number week in the cycle
      var cellWithCycleWeek = 'E4';
      var strCycleWeek =String(sheetWithDate.getRange(cellWithCycleWeek).getDisplayValue());
      // There might be a more elegant way to pass this ID back so that it's clear this function is being called for its side effects:
      var foldersIds = createFolderStructure(targetDate, strCycleWeek); 
    }
    
    generatePdf(targetDate, foldersIds); // put stuff in here to save each file to its relevant folder
    Logger.log("Pausing for 17 seconds, to avoid 429 error while processing the whole week.  Don't worry about it, just click ok :-)")
    
    Utilities.sleep(17000)
  }

    //function that saves a version of the whole file still in sheet form
    Browser.msgBox("all done, you can find your files in the target folder")


}

function generatePdf(targetDate, foldersIds) {
  
  sheetsToConvert = ["School_Delivery","COLD_Delivery","Prep"]
  
  for (var i = 0; i < 3; i++) {
  
    SpreadsheetApp.flush();    
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    SpreadsheetApp.setActiveSheet(ss.getSheetByName(sheetsToConvert[i]));
    var sheet = ss.getActiveSheet();
    var sheetName = sheet.getName();
    
    //Date set with format in EST (NYC) used in subject and PDF name 
    var currentDate = "generated on " + Utilities.formatDate(new Date(), "GMT+5", "yyyy.MM.dd");
    var url = ss.getUrl();
    
    var weekFolderID = foldersIds[4]; // This currently determines what folder it will be saved in. The source of this is the "createFolderStructure" function.
    // Use sheetsToConvert[i] to determine what folder to save it in
    var folder = DriveApp.getFolderById(foldersIds[i]);
    
    //remove the trailing 'edit' from the url
    url = url.replace(/edit$/, '');
    
    //additional parameters for exporting the sheet as a pdf
    var url_ext = 'export?exportFormat=pdf&format=pdf' + //export as pdf
      //below parameters are optional...
      '&size=letter' + //paper size
      '&portrait=false' + //orientation, false for landscape
      '&fitw=true' + //fit to width, false for actual size
      '&sheetnames=true&printtitle=true&pagenumbers=true' + //hide optional headers and footers
      '&gridlines=false' + //hide gridlines
      '&fzr=false' + //do not repeat row headers (frozen rows) on each page
      '&gid=' + sheet.getSheetId(); //the sheet's Id
    
    var token = ScriptApp.getOAuthToken();
    
    var response = UrlFetchApp.fetch(url + url_ext, {headers: {'Authorization': 'Bearer ' + token}});
    
    var blob = response.getBlob().setName(nameFile(targetDate, sheetName));
    
    var newFile = folder.createFile(blob);
  }
  
  
  
}   
   
function popup() {
  Browser.msgBox("we're going to make a pdf");
}

function findBreakRows() {
  sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("School_Delivery");
  value = "Signature:";
  
  var dataRange = sheet.getDataRange();
  var values = dataRange.getValues();
  
  var rowsBeforeBreaks = [];
  
  for (var i = 0; i < values.length; i++) {
    for (var j = 0; j < values[i].length; j++) {     
      if (values[i][j] == value) {
        rowsBeforeBreaks.push((i+3)); //the +3 gets us the row two after the search term.  this works for the pages with signature, may need to be adjusted for others
      }
    }    
  }
  Logger.log("Rows that could be expanded to account for page breaks:  " + rowsBeforeBreaks)
  return rowsBeforeBreaks;
}

function nameFile(targetDate, sheetName) {
  var fileName = targetDate + "_" + sheetName + ".pdf";  
  Logger.log(fileName);
  return fileName;
  
  // CAN DO: 
    // This has to make fewer request in hope of not either
      // - Going over time, or
      // - Making too many requests
  // Pass arguments around instead of selecting active sheet?
  // Refactor this
}

function nameWeeklyFolder(mondayDate) {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  SpreadsheetApp.setActiveSheet(spreadsheet.getSheetByName("LunchMenu"));
  var sheetWithWeek = SpreadsheetApp.getActiveSheet();
  var cycleWeek = 'w' + sheetWithWeek.getRange('E1').getValue();
  targetDate = Utilities.formatDate(targetDate, "GMT", "yyyy-MM-dd-EEEE");
}

function getCycleWeekNum(strCycleWeek) {
  strCycleWeek = String(strCycleWeek);
  for (var i = 1; i < 5; i++) {
    // if strCycleWeek includes i, then return i
    if (strCycleWeek.indexOf(i) > -1) {
      return i;
    }
  }
}

// Unnecessary?
function createSubFolder(parentFolderID, childFolderName) {
  var folder = DriveApp.getFolderById(parentFolderID);
  var newFolder = folder.createFolder(childFolderName);
  return newFolder;
}

function createFolderStructure(mondayDate, cycleWeek){
  var PARENT_FOLDER_ID = '1vnSexVhPkCqJWhi3worsjHF2o28qBWkA'; // Change this to desired parent folder id-- move to config block
  // change to DriveApp.getRootFolder();
  cycleWeek = getCycleWeekNum(cycleWeek);
  var WEEK_FOLDER_NAME = mondayDate + "_-_w" + cycleWeek; // Call function to name Folder for whole week
  var weekFolder = createSubFolder(PARENT_FOLDER_ID, WEEK_FOLDER_NAME);  
  // Would like to change this array to something more coherent but for now this is a "get it to green" type implementation until we determine what constants can be global configuration.
  var foldersIds = [];
  foldersIds[4] = weekFolder.getId();
  
  var CHILD_FOLDER_NAMES = ['UAECS_Delivery', 'Propel_Delivery', 'Prep_Sheets', 'Orders']
  for (var i = 0; i < CHILD_FOLDER_NAMES.length; i++) {
    var newFolderName = CHILD_FOLDER_NAMES[i];
    var newFolder = weekFolder.getFoldersByName(newFolderName);
    newFolder = newFolder.hasNext() ? newFolder.next() : weekFolder.createFolder(newFolderName);
    foldersIds[i] = newFolder.getId();
  }
  
//  var ordersFolders = weekFolder.getFoldersByName("Orders");
//  if(ordersFolders.hasNext()){
//    var ordersFolder = ordersFolders.next()
//  } else {
//    var ordersFolder = weekFolder.createFolder("Orders")
//    }
//    var prepSheetsFolders = weekFolder.getFoldersByName("Prep Sheets");
//  if(prepSheetsFolders.hasNext()){
//    var prepSheets = prepSheets.next()
//  } else {
//    var prepSheets = weekFolder.createFolder("Prep Sheets")
//    }
//    var propelDeliveryFolders = weekFolder.getFoldersByName("Propel Delivery");
//  if(propelDeliveryFolders.hasNext()){
//    var propelDelivery = propelDelivery.next()
//  } else {
//    var propelDelivery = weekFolder.createFolder("Propel Delivery")
//    }
//   var uaecsDeliveryFolders = weekFolder.getFoldersByName("UAECS Delivery");
//  if(uaecsDeliveryFolders.hasNext()){
//    var uaecsDelivery = uaecsDelivery.next()
//  } else {
//    var uaecsDelivery = weekFolder.createFolder("UAECS Delivery") 
//  
//  }
  
  return foldersIds;
}
